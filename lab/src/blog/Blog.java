package blog;
import base.*;
import java.io.*;
import java.util.Calendar;

import java.util.ArrayList;
public class Blog implements Serializable{
	private User user;
	private ArrayList<Post> AllPosts=new ArrayList<Post>();
	
	public Blog(User user){
		//TODO
		this.user=user;
	}
	public void setPosts(ArrayList<Post> o){
		this.AllPosts=o;
	}
	public void setUser(User user2){
		this.user=user2;
	}
	public User getUser(){
		return this.user;
	}
	public void post(Post p){
		//TODO
		AllPosts.add(p);
		System.out.println("A new post:");
		System.out.println(p);
	}
	public String getPostContent_Date(int index)
	{
		return this.AllPosts.get(index).toString();
	}
	public int blogSize()
	{
		return this.AllPosts.size();
	}
/**
 * list all the post
 */
	public void list(){
		//TODO
		int s=AllPosts.size();
		System.out.println("Current posts:");
		
		for(int i=0;i<s;i++)
		{
			System.out.printf("Post[%d]:"+AllPosts.get(i),i+1);
			System.out.println();
		}
	}
/**
 * delete a post from a blog
 */
	public void delete(int index){
		//TODO
		if(index<=0 || index>this.AllPosts.size())
			System.out.println("Illegal deletion");
		else
			this.AllPosts.remove(index-1);
	}
	/**
	 * search 
	 */
	public void search(int month, String someone)
	{
		Calendar cal=Calendar.getInstance();
		for(Post p: AllPosts)
		{
			cal.setTime(p.getDate());
			int postMonth= cal.get(Calendar.MONTH);
			
			if(postMonth+1==month)
			{
				if(p.contains(someone))
				{
					System.out.println(p.getContent());
					break;
				}
			}
			
		}
	}
	
@Override
	public String toString()
	{
		return this.user.toString()+"\n"+this.AllPosts.toString()+"\n";
	}

/**
 * hashCode() and equals () are generated by Eclipse
 */
@Override
public int hashCode() {
	final int prime = 31;
	int result = 1;
	result = prime * result + ((AllPosts == null) ? 0 : AllPosts.hashCode());
	result = prime * result + ((user == null) ? 0 : user.hashCode());
	return result;
}
@Override
public boolean equals(Object obj) {
	if (this == obj)
		return true;
	if (obj == null)
		return false;
	if (getClass() != obj.getClass())
		return false;
	Blog other = (Blog) obj;
	if (AllPosts == null) {
		if (other.AllPosts != null)
			return false;
	} else if (!AllPosts.equals(other.AllPosts))
		return false;
	if (user == null) {
		if (other.user != null)
			return false;
	} else if (!user.equals(other.user))
		return false;
	return true;
}

public void save(String filepath)
{
	try
	{
		ObjectOutputStream output=new ObjectOutputStream(new FileOutputStream(filepath));
		output.writeObject(this);
		output.close();
	}
	catch(IOException e)
	{
		e.printStackTrace();
	}
}
public void load(String filepath)
{
	try
	{
		ObjectInputStream input=new ObjectInputStream(new FileInputStream(filepath));
		Blog tmp=(Blog)(input.readObject());
		this.user=tmp.user;
		this.AllPosts=tmp.AllPosts;
		input.close();
	}
	catch(FileNotFoundException fx)
	{
		System.out.println("Wait! There is something wrong. I cannot find the file");
	}
	catch(IOException e)
	{
		e.printStackTrace();
	}
	catch(ClassNotFoundException ex)
	{
		ex.printStackTrace();
	}
	
}

}
